import os
import json
import logging
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Bot,
    MessageEntity,
    ChatPermissions
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

# Configuration
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(',')))
REPORT_GROUP = os.getenv("REPORT_GROUP")
DATA_FILE = "bot_data.json"

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
IMPORT_LINKS = range(1)

class BotDataManager:
    def __init__(self):
        self.data = {
            "links": [],
            "last_link_number": 0,
            "report_counts": {},
            "bot_active": True,
            "user_messages": {}
        }
        self.load_data()

    def load_data(self):
        try:
            with open(DATA_FILE, "r") as f:
                self.data = json.load(f)
                logger.info("Data loaded successfully")
        except (FileNotFoundError, json.JSONDecodeError):
            logger.warning("Data file not found or corrupted, initializing new data")
            self.save_data()

    def save_data(self):
        with open(DATA_FILE, "w") as f:
            json.dump(self.data, f, indent=2)
            logger.info("Data saved successfully")

bot_data = BotDataManager()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá @admin ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®")

async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not bot_data.data["bot_active"]:
            return

        if update.message.chat.type == "private":
            return

        if not update.message.reply_to_message:
            return

        if not any(entity.type == MessageEntity.MENTION for entity in update.message.entities):
            return

        reported_user = update.message.reply_to_message.from_user
        reporter_user = update.message.from_user
        message = update.message.reply_to_message

        # Check bot status in group
        try:
            bot_member = await context.bot.get_chat_member(update.message.chat.id, context.bot.id)
            if bot_member.status not in ["administrator", "member"]:
                return
        except Exception as e:
            logger.error(f"Bot status check failed: {e}")
            return

        # Update report count
        reporter_id = str(reporter_user.id)
        bot_data.data["report_counts"][reporter_id] = bot_data.data["report_counts"].get(reporter_id, 0) + 1
        bot_data.save_data()

        # Prepare report message
        report_text = f"""
üö® ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü üö®
‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ï‡¶æ‡¶∞‡ßÄ: {reporter_user.mention_html()} (‡¶Æ‡ßã‡¶ü ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü: {bot_data.data["report_counts"][reporter_id]})
‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: {reported_user.mention_html()}
‡¶ó‡ßç‡¶∞‡ßÅ‡¶™: {update.message.chat.title}
        """

        # Create buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Accept", callback_data=f"accept_{reported_user.id}_{reporter_user.id}"),
                InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_{reported_user.id}_{reporter_user.id}")
            ],
            [
                InlineKeyboardButton("üì© View Message", url=message.link)
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send to admins
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=report_text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Failed to send report to admin {admin_id}: {e}")

        # Send confirmation
        confirmation = await update.message.reply_to_message.reply_text("‚úÖ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        context.job_queue.run_once(delete_message, 10, data=confirmation.chat_id, name=f"delete_{confirmation.message_id}")

    except Exception as e:
        logger.error(f"Error in handle_report: {e}")

async def delete_message(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.delete_message(
        chat_id=context.job.data["chat_id"],
        message_id=context.job.data["message_id"]
    )

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action = data[0]
    reported_user_id = data[1]
    reporter_user_id = data[2]

    # Update message
    new_text = f"{query.message.text}\n\n‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {'‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá' if action == 'accept' else '‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá'}"
    await query.edit_message_text(text=new_text, parse_mode="HTML")

    # Notify reporter
    try:
        await context.bot.send_message(
            chat_id=reporter_user_id,
            text=f"‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø {'‡¶ó‡ßç‡¶∞‡¶π‡¶£' if action == 'accept' else '‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®'} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
        )
    except Exception as e:
        logger.error(f"Failed to notify user: {e}")

async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # ... [‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§]

        # Create buttons with GROUP ID in callback data
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ Accept", callback_data=f"accept_{reported_user.id}_{reporter_user.id}_{update.message.chat.id}"),
                InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_{reported_user.id}_{reporter_user.id}_{update.message.chat.id}")
            ],
            [
                InlineKeyboardButton("üì© View Message", url=message.link)
            ]
        ]

        # ... [‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡ßã‡¶° ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§]

async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action = data[0]
    reported_user_id = int(data[1])
    reporter_user_id = int(data[2])
    group_id = int(data[3])  # ‡¶®‡¶§‡ßÅ‡¶®: ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá

    # ... [‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§]

    # Handle multiple rejections
    if action == "reject":
        reporter_id_str = str(reporter_user_id)
        
        # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶π‡¶≤‡ßá ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
        bot_data.data["report_counts"][reporter_id_str] = bot_data.data["report_counts"].get(reporter_id_str, 0) + 1
        bot_data.save_data()

        # ‡ß©‡¶ü‡¶ø ‡¶∞‡¶ø‡¶ú‡ßá‡¶ï‡ßç‡¶ü ‡¶ö‡ßá‡¶ï
        if bot_data.data["report_counts"][reporter_id_str] >= 3:
            try:
                # ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï
                bot_member = await context.bot.get_chat_member(group_id, context.bot.id)
                if bot_member.status != "administrator":
                    raise Exception("‡¶¨‡¶ü‡¶ü‡¶ø ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡ßü")

                # ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏
                until_date = datetime.now() + timedelta(minutes=30)
                await context.bot.restrict_chat_member(
                    chat_id=group_id,  # ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
                    user_id=reporter_user_id,
                    permissions=ChatPermissions(
                        can_send_messages=False,
                        can_send_media_messages=False,
                        can_send_other_messages=False,
                        can_add_web_page_previews=False
                    ),
                    until_date=until_date
                )
                
                # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                await context.bot.send_message(
                    chat_id=group_id,
                    text=f"‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ [{reporter_user_id}](tg://user?id={reporter_user_id}) ‡¶ï‡ßá 30 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
                    parse_mode="Markdown"
                )
                
                # ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
                bot_data.data["report_counts"][reporter_id_str] = 0
                bot_data.save_data()

            except Exception as e:
                logger.error(f"‡¶Æ‡¶ø‡¶â‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e)}")
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"
                )

async def handle_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_data.data["bot_active"]:
        await update.message.reply_text("‚è≥ ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶Ü‡¶õ‡ßá")
        return

    user_id = str(update.effective_user.id)
    
    # Delete previous messages
    if user_id in bot_data.data["user_messages"]:
        for msg_id in bot_data.data["user_messages"][user_id]:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"Message deletion failed: {e}")
        bot_data.data["user_messages"][user_id] = []

    # Prepare new message
    links_text = "üì• ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶∏‡¶Æ‡ßÇ‡¶π:\n\n"
    keyboard = []
    for link in bot_data.data["links"]:
        links_text += f"{link['number']}.üîó [‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶≤‡¶ø‡¶Ç‡¶ï]({link['url']}) [{link['date']}]\n"
        keyboard.append([InlineKeyboardButton(
            text=f"‡¶≤‡¶ø‡¶Ç‡¶ï {link['number']}", 
            url=link['url']
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    sent_message = await update.message.reply_text(
        text=links_text,
        reply_markup=reply_markup,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    # Store message ID
    if user_id not in bot_data.data["user_messages"]:
        bot_data.data["user_messages"][user_id] = []
    bot_data.data["user_messages"][user_id].append(sent_message.message_id)
    bot_data.save_data()

async def manage_links(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
        return

    keyboard = [
        [InlineKeyboardButton("üì§ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï", callback_data="export_links")],
        [InlineKeyboardButton("üì• ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï", callback_data="import_links")],
        [InlineKeyboardButton("üóëÔ∏è ‡¶∏‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="delete_all_links")]
    ]
    
    await update.message.reply_text(
        "üîó ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    with open("links_export.json", "w") as f:
        json.dump(bot_data.data["links"], f)
    
    await context.bot.send_document(
        chat_id=query.message.chat_id,
        document=open("links_export.json", "rb"),
        caption="üì§ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤"
    )

async def handle_import(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üì• ‡¶è‡¶ï‡¶ü‡¶ø JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá /sample ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®)")
    return IMPORT_LINKS

async def handle_uploaded_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("‚ùå ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø")
        return ConversationHandler.END

    file = await update.message.document.get_file()
    await file.download_to_drive("temp_import.json")
    
    try:
        with open("temp_import.json", "r") as f:
            imported_data = json.load(f)
            
            if not isinstance(imported_data, list):
                raise ValueError("Invalid format")
            
            bot_data.data["links"] = imported_data
            bot_data.data["last_link_number"] = max([link["number"] for link in imported_data], default=0)
            bot_data.save_data()
            
            await update.message.reply_text(f"‚úÖ {len(imported_data)} ‡¶ü‡¶ø ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e)}")
    
    return ConversationHandler.END

async def toggle_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
        return

    bot_data.data["bot_active"] = not bot_data.data["bot_active"]
    bot_data.save_data()
    
    status = "‡¶ö‡¶æ‡¶≤‡ßÅ" if bot_data.data["bot_active"] else "‡¶¨‡¶®‡ßç‡¶ß"
    await update.message.reply_text(f"üîå ‡¶¨‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {status}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    return ConversationHandler.END

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("managelinks", manage_links))
    application.add_handler(CommandHandler("toggle", toggle_bot))

    # Message handlers
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Entity(MessageEntity.MENTION),
        handle_report
    ))
    application.add_handler(MessageHandler(
        filters.Regex(r"(?i)download|‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°"),
        handle_download
    ))

    # Callback handlers
    application.add_handler(CallbackQueryHandler(handle_button_click, pattern=r"^(accept|reject)_"))
    application.add_handler(CallbackQueryHandler(handle_export, pattern="^export_links"))
    
    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_import, pattern="^import_links")],
        states={
            IMPORT_LINKS: [MessageHandler(filters.Document.FileExtension("json"), handle_uploaded_file)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv_handler)

    application.run_polling()

if __name__ == "__main__":
    main()
