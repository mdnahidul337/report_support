from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

# рж▓ржЧрж┐ржВ ржЪрж╛рж▓рзБ
logging.basicConfig(level=logging.INFO)

# ржЧрзНрж░рзБржк ржЖржЗржбрж┐ ржПржмржВ ржЕрзНржпрж╛ржбржорж┐ржи ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ рж▓рж┐рж╕рзНржЯ
GROUP_ID =   # рждрзЛржорж╛рж░ ржЧрзНрж░рзБржкрзЗрж░ ID
# ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ Telegram user ID ржмрж╕рж╛ржУ
ADMIN_IDS = [6017525126, 6347226702]  # ржПржЦрж╛ржирзЗ рждрзЛржорж╛рж░ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ID ржжрж┐ржмрзЗ

# @admin tag ржжрзЗржЦрж▓рзЗ
async def report_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.lower()

    # ржпржжрж┐ @admin ржерж╛ржХрзЗ ржорзЗрж╕рзЗржЬрзЗ
    if '@admin' in text:
        user = update.message.from_user
        chat = update.message.chat

        # ржЗржЙржЬрж╛рж░ ржЧрзНрж░рзБржкрзЗ ржЖржЫрзЗ ржХрж┐ ржирж╛ ржЪрзЗржХ ржХрж░рж╛
        try:
            member = await context.bot.get_chat_member(GROUP_ID, user.id)
            if member.status not in ['member', 'administrator', 'creator']:
                await update.message.reply_text("тЪая╕П рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рждрзЗ рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд ржерж╛ржХрждрзЗ рж╣ржмрзЗред")
                return
        except Exception as e:
            await update.message.reply_text("тЪая╕П рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рждрзЗ рж╣рж▓рзЗ ржЖржкржирж╛ржХрзЗ ржЧрзНрж░рзБржкрзЗ ржпрзБржХрзНржд ржерж╛ржХрждрзЗ рж╣ржмрзЗред")
            return

        # View Button рждрзИрж░рж┐ ржХрж░рж╛
        view_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯСБя╕П View Message", url=f"https://t.me/c/{str(GROUP_ID)[4:]}/{update.message.message_id}")]
        ])

        # рж░рж┐ржкрзЛрж░рзНржЯ ржорзЗрж╕рзЗржЬ рждрзИрж░рж┐
        report_message = (
            f"ЁЯЪи *ржирждрзБржи рж░рж┐ржкрзЛрж░рзНржЯ!* ЁЯЪи\n\n"
            f"ЁЯСд рж░рж┐ржкрзЛрж░рзНржЯржХрж╛рж░рзА: [{user.full_name}](tg://user?id={user.id})\n"
            f"ЁЯТм ржмрж╛рж░рзНрждрж╛:\n{update.message.text}\n\n"
            f"ЁЯУН [ржЧрзНрж░рзБржкрзЗ ржорзЗрж╕рзЗржЬ ржжрзЗржЦрзБржи](https://t.me/c/{str(GROUP_ID)[4:]}/{update.message.message_id})"
        )

        # ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржЯрзЗ рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржарж╛ржирзЛ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=report_message,
            parse_mode="Markdown",
            reply_markup=view_button
        )

        # ржЗржЙржЬрж╛рж░ржХрзЗ ржЙрждрзНрждрж░
        await update.message.reply_text("тЬЕ ржЖржкржирж╛рж░ рж░рж┐ржкрзЛрж░рзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЕрзНржпрж╛ржбржорж┐ржиржжрзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред ржзржирзНржпржмрж╛ржж!", quote=True)

# /start ржХржорж╛ржирзНржб
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! @admin ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕ржорж╕рзНржпрж╛ рж░рж┐ржкрзЛрж░рзНржЯ ржХрж░рзБржиред")

# ржорзЗржЗржи ржЕрзНржпрж╛ржк
app = ApplicationBuilder().token('YOUR_BOT_TOKEN').build()

# рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛
app.add_handler(CommandHandler('start', start_command))
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), report_to_admin))

app.run_polling()
