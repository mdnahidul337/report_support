import os
import json
import logging
import sys
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    MessageEntity,
    ChatPermissions
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

# Configuration
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(',')))
DATA_FILE = "bot_data.json"
SPAM_LIMIT = 3  # ‡¶è‡¶ï‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
MUTE_DURATION = 10  # ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotData:
    def __init__(self):
        self.links = []
        self.report_counts = {}
        self.last_link_number = 0
        self.user_messages = {}
        self.auto_replies = {}
        self.spam_data = {}  # {user_id: {"messages": {text: count}, "last_message_time": timestamp}}
        self.load_data()

    def load_data(self):
        try:
            with open(DATA_FILE, "r") as f:
                data = json.load(f)
                self.links = data.get("links", [])
                self.report_counts = data.get("report_counts", {})
                self.last_link_number = data.get("last_link_number", 0)
                self.user_messages = data.get("user_messages", {})
                self.auto_replies = data.get("auto_replies", {})
                self.spam_data = data.get("spam_data", {})
        except (FileNotFoundError, json.JSONDecodeError):
            self.save_data()

    def save_data(self):
        with open(DATA_FILE, "w") as f:
            json.dump({
                "links": self.links,
                "report_counts": self.report_counts,
                "last_link_number": self.last_link_number,
                "user_messages": self.user_messages,
                "auto_replies": self.auto_replies,
                "spam_data": self.spam_data
            }, f, indent=2)

bot_data = BotData()

# ------------------ ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ------------------
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üõ†Ô∏è **‡¶∏‡¶ï‡¶≤ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°:**
/start - ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
/addlink <url> <date> - ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
/managelinks - ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
/help - ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
/Qus <question> <answer> - ‡¶Ö‡¶ü‡ßã ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    """
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def add_auto_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õî ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®!")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ùå ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /Qus '‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®' '‡¶â‡¶§‡ßç‡¶§‡¶∞'")
        return

    question = ' '.join(args[:-1])
    answer = args[-1]
    bot_data.auto_replies[question.lower()] = answer
    bot_data.save_data()
    await update.message.reply_text(f"‚úÖ ‡¶Ö‡¶ü‡ßã ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá:\nQ: {question}\nA: {answer}")

async def handle_auto_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message_text = update.message.text.lower()

    # ‡¶∏‡ßç‡¶™‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï
    current_time = datetime.now().timestamp()
    if user_id not in bot_data.spam_data:
        bot_data.spam_data[user_id] = {"messages": {}, "last_message_time": current_time}
    else:
        time_diff = current_time - bot_data.spam_data[user_id]["last_message_time"]
        if time_diff > 300:  # 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü
            bot_data.spam_data[user_id] = {"messages": {}, "last_message_time": current_time}

    # ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    if message_text in bot_data.spam_data[user_id]["messages"]:
        bot_data.spam_data[user_id]["messages"][message_text] += 1
    else:
        bot_data.spam_data[user_id]["messages"][message_text] = 1

    # ‡¶∏‡ßç‡¶™‡¶æ‡¶Æ ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü
    if bot_data.spam_data[user_id]["messages"][message_text] > SPAM_LIMIT:
        try:
            await context.bot.restrict_chat_member(
                chat_id=update.message.chat.id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=datetime.now() + timedelta(minutes=MUTE_DURATION)
            )
            await update.message.reply_text(f"‚ö†Ô∏è ‡¶∏‡ßç‡¶™‡¶æ‡¶Æ‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø {MUTE_DURATION} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
            bot_data.spam_data[user_id]["messages"].clear()
        except Exception as e:
            logger.error(f"‡¶Æ‡¶ø‡¶â‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e)}")

    # ‡¶Ö‡¶ü‡ßã ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ö‡ßá‡¶ï
    for question, answer in bot_data.auto_replies.items():
        if question in message_text:
            await update.message.reply_text(f"ü§ñ ‡¶â‡¶§‡ßç‡¶§‡¶∞: {answer}")
            break

# ------------------ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü‡ßá‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ------------------
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    action, reported_id, reporter_id, group_id = data[0], int(data[1]), int(data[2]), int(data[3])

    # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    await query.edit_message_text(f"{query.message.text}\n‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {'‚úÖ Accepted' if action == 'accept' else '‚ùå Rejected'}")

    # Accept ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (2 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ)
    if action == "accept":
        try:
            await context.bot.restrict_chat_member(
                chat_id=group_id,
                user_id=reported_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=datetime.now() + timedelta(hours=2)
            )
            await context.bot.send_message(
                group_id,
                f"‚õî ‡¶Ö‡¶≠‡¶ø‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ [{reported_id}](tg://user?id={reported_id}) ‡¶ï‡ßá 2 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"‡¶Æ‡¶ø‡¶â‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e)}")

    # Reject ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    elif action == "reject":
        reporter_str = str(reporter_id)
        bot_data.report_counts[reporter_str] = bot_data.report_counts.get(reporter_str, 0) + 1
        bot_data.save_data()

        if bot_data.report_counts[reporter_str] >= 3:
            try:
                await context.bot.restrict_chat_member(
                    chat_id=group_id,
                    user_id=reporter_id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=datetime.now() + timedelta(minutes=30)
                )
                await context.bot.send_message(
                    group_id,
                    f"‚õî ‡¶Æ‡¶ø‡¶•‡ßç‡¶Ø‡¶æ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø [{reporter_id}](tg://user?id={reporter_id}) ‡¶ï‡ßá 30 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Æ‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
                    parse_mode="Markdown"
                )
                bot_data.report_counts[reporter_str] = 0
                bot_data.save_data()
            except Exception as e:
                logger.error(f"‡¶Æ‡¶ø‡¶â‡¶ü ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e)}")

    # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®
    try:
        await context.bot.send_message(
            reporter_id,
            f"üì¢ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶ü‡¶ø {'‡¶ó‡ßç‡¶∞‡¶π‡¶£' if action == 'accept' else '‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®'} ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá"
        )
    except Exception as e:
        logger.error(f"DM failed: {str(e)}")
        await context.bot.send_message(
            group_id,
            f"üîî ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ [{reporter_id}](tg://user?id={reporter_id}) ‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø\n"
            f"‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: `{reporter_id}`",
            parse_mode="Markdown"
        )

def main():
    if os.name == 'posix':
        os.system("pkill -f app.py")
    else:
        os.system("taskkill /im python.exe /f")

    try:
        app = Application.builder().token(BOT_TOKEN).build()
        
        # ‡¶®‡¶§‡ßÅ‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("Qus", add_auto_reply))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_auto_reply))

        # ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        # [‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®]

        app.run_polling()
    except KeyboardInterrupt:
        logger.info("‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‡¶ï‡ßç‡¶∞‡¶ø‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶è‡¶∞‡¶∞: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
